常量对象、常量成员、常引用
class A{
};

则const A a;//a即常量对象，常量对象不可更改

常量成员函数：
在类的成员函数后加const
class A{
	int value;
	void func() const ;	
	void func2();
	void func3() const ;	
};

void A::func() const
{
	value = 0;//error：不能修改对象成员值
	func2();//error:不能调用非常量同类对象成员变量
	func3();//right:可以调用常量成员函数
}

int main()
{
	conts A o;
	o.value = 100;//error：常量对象不能被修改内容
	o.func2();//error:常量对象不能调用非常量成员函数（可能会更改对象成员值）
	o.func();//right:正确。常量对象可以调用常量成员函数
}

常量成员函数执行期间不应修改作用的对象：
1 常量成员函数中不能修改成员变量值（静态成员变量除外）
2 常量成员函数中不能调用同类的非常量成员函数（静态成员函数除外）

常量成员函数的重载：
	两个成员函数，名字和参数表一样，但一个有const修饰，一个没有，则算重载
class A{
	private:
		int n;
	public:
		A(){n=1};
		int func()	const {};
		int func() {};//重载
};

int main()
{
	const A a;
	A		b;

	cout << a.func() << ',' << b.func()<< endl;
	//a是常量对象，默认调用常量成员函数；b是非常累对象，默认使用非常量成员函数
}

常引用
	引用前面加const关键字，成为常引用
	不能通过常引用修改引用的变量。
	对象作为函数参数时，生成参数需要调用复制构造函数；
	而使用指针作为参数代码不够美观！此时使用引用。
	为了确保引用变量空间安全，使用常引用避免调用函数更改引用空间值。
