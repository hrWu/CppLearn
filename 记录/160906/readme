自增/自减运算符的重载

前置++/--是一元运算符
重载为成员函数：
T operator++();
T operator--();

重载为全局函数：
T operator++(T);
T operator--(T);

++a,a.operator++(),operator++(a)都调用以上函数


后置++/--是二元运算符
多写一个参数，但具体并没有意义
重载为成员函数
T operator++(int);
T operator--(int);

重载为全局函数：
T operator++(T,int);
T operator--(T,int);

a++,a.operator++(0),operator++(a,0)都调用以上函数


类型强制转换运算符的重载
operator int(){ return n };

Demo s;
(int)s;//等效于s.int();

类型强制转换运算符重载时
	不能写返回值类型
	实际上其返回值类型--即类型强制转换运算符代表的类型

运算符重载的注意事项：
	C++不允许定义新的运算符
	重载后运算符的含义应该符合日常习惯
	运算符重载不改变运算符的优先级
	以下运算符不能被重载
		"." ",*" "::" "?:" sizeof
	重载运算符() [] ->或者赋值运算符=时，重载函数必须声明为类的成员函数


