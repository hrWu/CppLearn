成员对象和封闭类

成员对象：一个类的成员变量是另外一个类的对象
封闭类：含有成员对象的类就是封闭类

eg:
	class CTyre(	//轮胎类
		private:
			int radius;//半径
			int width;//宽度
		public:
			Ctyre(int r,int w):radius(r),width(w)//初始化列表，等价于radius=r,width=w
			{...}
	);
	class CEngine{	//引擎类
	};
	
	class CCar{		//汽车类，封闭类
		private:
			int		price; //价格
			CTyre	tyre;
			CEngine	engine;
		public:
			CCar(int p,int r, int w);
	};
	CCar::CCar(int p, int r, int w):price(p),tyre(r,w)//初始化列表
	{...}

	int main()
	{
		CCar car(200000,17,225);

		return 0;	
	}

注意：
1 若封闭类CCar未定义构造函数，CCar car操作将会error，
	因为：编译器不知道car.tyre应该如何初始化
		  而car.engine初始化没有问题，使用默认构造函数
	所以：生成封闭类对象时，要明确“对象中的成员对象”是否要进行初始化
2 对封闭类的成员对象进行初始化，使用的即是初始化列表，初始化列表中的参数表将会对对应的初始化变量或初始化成员对象进行初始化；
  初始化列表中的参数表：
	可以是任意复杂的表达式；
	也可以是函数/变量/表达式中的函数，变量应有定义


调用顺序：
封闭类对象生成时：：
	1 先执行成员对象的构造函数；
	2 再执行封闭类对象的构造函数。

成员对象的构造函数调用顺序：
	1 和成员对象在封闭类中的说明顺序一致；
	2 与在成员初始化列表中出现的顺序无关。

当封闭类对象消亡时：
	1 先执行封闭类的析构函数；
	2 再执行成员对象的析构函数。

即：先构造的后析构，后构造的先析构



