运算符重载的基本概念

程序更加简洁
代码更容易理解

运算符重载，就是对已有的运算符赋予多重含义；
对同一运算符作用于不同类型数据时，对应不同类型的行为


实质：即是对函数的重载：

返回值 operator运算符(形参表)
{
	......	
}

程序在编译时，
	将含运算符的表达式对应为对运算符函数的调用
	将运算符的操作数作为运算符函数的参数
	运算符被多次重载时，根据实参的类型决定调用哪个运算符函数
	运算符可以被重载为普通函数也可以被重载为类的成员函数

重载为普通函数
Complex operator+(const Complex &a,const Complex &b)
{
	return Complex(a.real+b.real, a.imag+b.imag);
}

Complex a(1,2),b(2,3),c;
c = a + b;//相当于 operator+(a,b)
重载为普通函数时，参数个数为运算符目数。

重载为成员函数
class Comples{
	public:
		Complex(doub r=0.0,double m=0.0):real(r),imag(m){}
		Complex operator+(const Complex &);
		Complex operator-(const Complex &);
	private:
		double real,imag;
};

Complex Complex::operator+(const Complex &operand2){
	return Complex(real+operand2.real,imag+operand2.imag);
}

重载为成员函数时，参数个数为运算符目数减一
a+b <=> a.operator+(b)

