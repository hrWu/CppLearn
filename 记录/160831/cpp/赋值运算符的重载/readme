赋值运算符 = 的重载
c1 = c2;//是将c2的内容按位赋值给c1

1 赋值运算符两侧的类型不一致时，需要重载赋值运算符 = 
2 赋值运算符只能重载为成员函数

编写一个长度可变的字符串类String
	1）包含一个char *类型的成员变量
		指向动态分配的存储空间
	2）存储空间用于存放'\0'结尾的字符串

class String{
	private:
		char *str;
	public:
		String():str(NULL){};
		const char * c_str(){return str;}//保证返回的str指向内容不可被修改
		char *operator=(const char *s);
		~String();
};

char *String::operator=(const char * s){
	if(str) delete [] str;
	if(s){
		str = new char[strlen(s)+1];
		strcpy(str,s);	
	}else{
		str = NULL;	
	}
	return str;
}

String::~String(){
	if(str) delete [] str;
}

int main()
{
	String s;
	s = "Good Luck!";
	cout << s.c_str() << endl;
	//String s2 = "hello";//error：此处=是初始化，会调用构造函数，因为没有对应构造，会报错
	s = "shenzhou 8!";
	cout << s.c_str() << endl;

	return 0;
}


赋值运算符重载的意义-浅复制和深复制
S1=S2;
默认的复制是浅复制，即对变量空间按内存内容进行逐个内存的拷贝操作：
	MyString S1,S2;
	S1 = "this";
	S2 = "that";
	S2 = S1;
此处进行浅拷贝就会发生内存的泄漏问题！

此时应该考虑深拷贝：
	讲一个对象中指针变量指向的内容复制到另一个对象成员指针指向的内容；
此时对赋值运算符再次进行重载，在class MyString里添加新的成员函数

String & operator = (const String & s){
	if(str) delete [] str;
	str = new char[strlen(s.str)+1];
	strcpy(str,s.str);
	return *this;
}

再次考虑：
MyString s;
s = "Hello";
s = s;

此时再调用重载的赋值运算符函数时，会先将str释放，再进行其他操作，这样也是有error发生的

String & operator = (const String & s){
	if(str == s.str) return *this;
	if(s.str){
		if(str) delete [] str;
		str = new char[strlen(s.str)+1];
		strcpy(str,s.str);
	}else{
		str = NULL;
	}
	return *this;
}



对operator = 的返回值类型进行讨论！
返回 void 可以吗？
不可以！
1）考虑：a = b = c；
	//上式等价于a.operator=(b.operator=(c));
	若返回值为void，则下一步运算a.operator=(void),即是error
2)为什么考虑返回值为String &
	考虑:(a=b)=c;//会修改a的值；
	//等价于：(a.operator=(b)).operator=(c);
	//若不适用String &类型返回值，a的值不会发生变化

 注意：为String类编写复制构造函数时，也会面临与=同样的问题

 比如
	String s1;
	s1 = "hello";
	String s2(s1);//或者s2 =  s1;
	此时会调用复制构造函数，复制构造函数也会发生类似于浅拷贝，指向同一空间问题！
	解决方法与赋值运算符重载一致

String::String(String &s)
{
	if(s.str){
		str = new char[strlen(s.str)+1];
		strcpy(str,s.str);
	}else{
		str = NULL;
	}
}

