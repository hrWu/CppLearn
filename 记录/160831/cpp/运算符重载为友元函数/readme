运算符重载为友元函数

一般情况下，我们会将运算符重载为类的成员函数
重载为友元函数情况：
	成员函数不能满足使用要求
	普通函数不能访问类的私有成员

class Complex{
	double real,imag;
	public:
		Complex(double r, double i):real(r),imag(i){};
		Complex operator+(double r);
};

Complex Complex::operator+(double r){//此处可以解释 c + 5
	return Complex(real+r,imag);
}
Complex c;
c = c + 5;//有定义，相当于c = c.operator+(5)
但是：
c = 5 + c;//编译出错

为了使上式成立，需要将+重载为普通函数
Complex operator+(double r, const Complex & c)
{
	return Complex(c.real+r,c.imag);
}
但是：普通函数不能访问私有成员，故，需要将运算符+重载为友元函数

class Complex{
	double real,imag;
	public:
		Complex(double r, double i):real(r),imag(i){};
		friend Complex operator+(double r,const Complex &c);
};
